# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Todo.ui'
#
# Created by: PyQt5 UI code generator 5.15.5
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import datetime

CurrentDate = datetime.datetime.now()

#I'm learning how to create a Todo list and add the items to a database 
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox #This allows us to create a pop up message
import sqlite3

con = sqlite3.connect("myList.db") #This creates the database
c = con.cursor() #This creates a cursor which helps to perform some actions

c.execute("""CREATE TABLE if not exists todoList( 
    listItem text)
    """) #todoList = tableName and listItem = tableColumn 

con.commit() #This commit the changes
con.close() #This close the connection 


class Ui_Todo_List(object):
    def setupUi(self, Todo_List):
        Todo_List.setObjectName("Todo_List")
        Todo_List.resize(569, 456)
        Todo_List.setWindowOpacity(1.0)
        self.centralwidget = QtWidgets.QWidget(Todo_List)
        self.centralwidget.setObjectName("centralwidget")
        self.listEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.listEdit.setGeometry(QtCore.QRect(10, 30, 551, 31))
        self.listEdit.setObjectName("listEdit")

        self.timeLabel = QtWidgets.QLabel(self.centralwidget)
        self.timeLabel.setGeometry(QtCore.QRect(10, 0, 291, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.timeLabel.setFont(font)
        self.timeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.timeLabel.setObjectName("timeLabel")

        self.addButton = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.add()) #This makes the add button functional
        self.addButton.setGeometry(QtCore.QRect(10, 70, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.addButton.setFont(font)
        self.addButton.setObjectName("addButton")

        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.clear()) #This makes the clear item button functional
        self.pushButton_2.setGeometry(QtCore.QRect(390, 70, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")

        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.delete()) #This makes the delete item button functional
        self.pushButton_3.setGeometry(QtCore.QRect(200, 70, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")

        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(10, 110, 551, 301))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.listWidget.setFont(font)
        self.listWidget.setObjectName("listWidget")

        self.saveButton = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.save())
        self.saveButton.setGeometry(QtCore.QRect(341, 0, 221, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.saveButton.setFont(font)
        self.saveButton.setObjectName("saveButton")

        Todo_List.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(Todo_List)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 569, 21))
        self.menubar.setObjectName("menubar")
        Todo_List.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(Todo_List)
        self.statusbar.setObjectName("statusbar")
        Todo_List.setStatusBar(self.statusbar)

        self.retranslateUi(Todo_List)
        QtCore.QMetaObject.connectSlotsByName(Todo_List)

        self.grabAll() #This calls the grab functionality for the database

    def grabAll(self): #This creates the grab function
        con = sqlite3.connect("myList.db") #This creates the database
        c = con.cursor() #This creates a cursor which helps to perform some actions

        c.execute("SELECT * FROM todoList") #This selects everything from the todo list
        records = c.fetchall() #This assigns all the item selected from the todoList to the variable records

        con.commit() #This commit the changes
        con.close() #This close the connection
        for record in records: #This loops through the records and add to the screen
            self.listWidget.addItem(str(record[0])) #This adds only the first item of the tuple 

    def add(self): #This handles the functionality for the add item button
        item = self.listEdit.text() #This assigns whatever is in the list edit box to a variable called item.. listEdit is the object name for the list edit box
        self.listWidget.addItem(item) #listWidget is the object name for the list widget.. This adds what is in item to the list widget
        self.listEdit.setText("") #This sets the listEdit box back to empty to contain a new item

    def clear(self):
        self.listWidget.clear() #This clears everything from the list

    def delete(self):
        clicked = self.listWidget.currentRow() #This allows us to grab a selected row and then assigns an index to the row
        self.listWidget.takeItem(clicked) #takeItem functions allows you to take the selected item out from the list  

    def save(self):
        con = sqlite3.connect("myList.db") #This creates the database
        c = con.cursor() #This creates a cursor which helps to perform some actions
        c.execute("DELETE FROM todoList;",) #This deletes everything from the database 

        items = []
        for index in range(self.listWidget.count()): #This takes the number of items in the list widget
            items.append(self.listWidget.item(index)) #This adds the various items to the items list

        for item in items:
            c.execute("INSERT INTO todoList VALUES (:item)",
                      {
                         "item": item.text(), 
                      }) #This adds items to the database table
                      
        con.commit() #This commit the changes
        con.close() #This close the connection

        msg = QMessageBox() #This creates the pop up box functionality
        msg.setWindowTitle("Saved!!")
        msg.setText("Your todo list has been saved")
        msg.setIcon(QMessageBox.Information) #This sets an icon for the pop up box
        x = msg.exec_() #This executes the pop up box


    def retranslateUi(self, Todo_List):
        _translate = QtCore.QCoreApplication.translate
        Todo_List.setWindowTitle(_translate("Todo_List", "Todo List"))
        self.timeLabel.setText(_translate("Todo_List", CurrentDate.strftime("%H:%M:%S %p. %d %B, %Y")))
        self.addButton.setText(_translate("Todo_List", "Add Item"))
        self.pushButton_2.setText(_translate("Todo_List", "Clear List"))
        self.pushButton_3.setText(_translate("Todo_List", "Delete Item"))
        self.saveButton.setText(_translate("Todo_List", "Save"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Todo_List = QtWidgets.QMainWindow()
    ui = Ui_Todo_List()
    ui.setupUi(Todo_List)
    Todo_List.show()
    sys.exit(app.exec_())
